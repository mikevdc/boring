import contextvars
import logging
import threading

from fastapi import Request
from starlette.middleware.base import BaseHTTPMiddleware
from uuid import uuid4


# Global context for request_id
request_id_ctx = contextvars.ContextVar("request_id", default="N/A")

'''
This class adds, for every request, the request_id generated by RequestIDMiddleware, and the name of the 
thread that is currently running.
Once done this, adds it to record, in order to show it on logs.
'''
class RequestLogFormatter(logging.Formatter):
    def format(self, record):
        record.request_id = request_id_ctx.get() # Adds request_id to record
        record.thread_name = threading.current_thread().name # Adds thread_name to record
        return super().format(record)
    
'''
This class gathers every request and generates an ID to show it on logs.
'''
class RequestLogMiddleware(BaseHTTPMiddleware):
    async def dispatch(self, request, call_next):

        # Generate an ID for request
        request_id = str(uuid4())
        request_id_ctx.set(request_id)

        response = await call_next(request)
        response.headers["X-Request-ID"] = request_id

        return response
